"""Stub file for the '_sre' module."""
# This is an autogenerated file. It serves as a starting point
# for a more precise manual annotation of this module.
# Feel free to edit the source below, but remove this header when you do.

from typing import Any, List, Tuple, Dict, GenericType

CODESIZE = ...  # type: int
MAGIC = ...  # type: int
MAXREPEAT = ...  # type: long
copyright = ...  # type: str

def compile(a, b: int, c, *args, **kwargs) -> SRE_Pattern:
    raise OverflowError()

def getcodesize() -> int: ...

def getlower(a: int, b: int) -> int: ...


class SRE_Match(object):
    def __copy__(self) -> Any:
        raise TypeError()
    def __deepcopy__(self, *args, **kwargs) -> Any:
        raise TypeError()
    def end(self, *args, **kwargs) -> int:
        raise IndexError()
    def expand(self, *args, **kwargs) -> Any: ...
    def group(self, *args, **kwargs) -> tuple: ...
    def groupdict(self, *args, **kwargs) -> dict: ...
    def groups(self, *args, **kwargs) -> tuple: ...
    def span(self, *args, **kwargs) -> tuple:
        raise IndexError()
    def start(self, *args, **kwargs) -> int:
        raise IndexError()

class SRE_Pattern(object):
    def __copy__(self) -> Any:
        raise TypeError()
    def __deepcopy__(self, *args, **kwargs) -> Any:
        raise TypeError()
    def findall(self, source, *args, **kwargs) -> List[tuple]: ...
    def finditer(self, *args, **kwargs) -> callable_iterator: ...
    def match(self, pattern, *args, **kwargs) -> Any: ...
    def scanner(self, a, *args, **kwargs) -> SRE_Scanner: ...
    def search(self, pattern, *args, **kwargs) -> Any: ...
    def split(self, source, *args, **kwargs) -> List[None]: ...
    def sub(self, repl, string, *args, **kwargs) -> tuple: ...
    def subn(self, repl, string, *args, **kwargs) -> tuple: ...

class SRE_Scanner(object):
    def match(self) -> Any: ...
    def search(self) -> Any: ...
