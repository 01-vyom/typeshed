"""Stub file for the 'operator' module."""
# This is an autogenerated file. It serves as a starting point
# for a more precise manual annotation of this module.
# Feel free to edit the source below, but remove this header when you do.

from typing import List, Tuple, Dict, GenericType

def __abs__(*args, **kwargs) -> object: ...

def __add__(*args, **kwargs) -> object: ...

def __and__(*args, **kwargs) -> object: ...

def __concat__(*args, **kwargs) -> object: ...

def __contains__(*args, **kwargs) -> bool: ...

def __delitem__(*args, **kwargs) -> None: ...

def __delslice__(a, b: int, c: int) -> None: ...

def __div__(*args, **kwargs) -> object: ...

def __eq__(*args, **kwargs) -> object: ...

def __floordiv__(*args, **kwargs) -> object: ...

def __ge__(*args, **kwargs) -> object: ...

def __getitem__(*args, **kwargs) -> object: ...

def __getslice__(a, b: int, c: int) -> object: ...

def __gt__(*args, **kwargs) -> object: ...

def __iadd__(*args, **kwargs) -> object: ...

def __iand__(*args, **kwargs) -> object: ...

def __iconcat__(*args, **kwargs) -> object: ...

def __idiv__(*args, **kwargs) -> object: ...

def __ifloordiv__(*args, **kwargs) -> object: ...

def __ilshift__(*args, **kwargs) -> object: ...

def __imod__(*args, **kwargs) -> object: ...

def __imul__(*args, **kwargs) -> object: ...

def __index__(*args, **kwargs) -> object: ...

def __inv__(*args, **kwargs) -> object: ...

def __invert__(*args, **kwargs) -> object: ...

def __ior__(*args, **kwargs) -> object: ...

def __ipow__(*args, **kwargs) -> object: ...

def __irepeat__(a, b: int) -> object: ...

def __irshift__(*args, **kwargs) -> object: ...

def __isub__(*args, **kwargs) -> object: ...

def __itruediv__(*args, **kwargs) -> object: ...

def __ixor__(*args, **kwargs) -> object: ...

def __le__(*args, **kwargs) -> object: ...

def __lshift__(*args, **kwargs) -> object: ...

def __lt__(*args, **kwargs) -> object: ...

def __mod__(*args, **kwargs) -> object: ...

def __mul__(*args, **kwargs) -> object: ...

def __ne__(*args, **kwargs) -> object: ...

def __neg__(*args, **kwargs) -> object: ...

def __not__(*args, **kwargs) -> bool: ...

def __or__(*args, **kwargs) -> object: ...

def __pos__(*args, **kwargs) -> object: ...

def __pow__(*args, **kwargs) -> object: ...

def __repeat__(a, b: int) -> object: ...

def __rshift__(*args, **kwargs) -> object: ...

def __setitem__(*args, **kwargs) -> None: ...

def __setslice__(a, b: int, c: int, d) -> None: ...

def __sub__(*args, **kwargs) -> object: ...

def __truediv__(*args, **kwargs) -> object: ...

def __xor__(*args, **kwargs) -> object: ...

def abs(*args, **kwargs) -> object: ...

def add(*args, **kwargs) -> object: ...

def and_(*args, **kwargs) -> object: ...

def concat(*args, **kwargs) -> object: ...

def contains(*args, **kwargs) -> bool: ...

def countOf(*args, **kwargs) -> int: ...

def delitem(*args, **kwargs) -> None: ...

def delslice(a, b: int, c: int) -> None: ...

def div(*args, **kwargs) -> object: ...

def eq(*args, **kwargs) -> object: ...

def floordiv(*args, **kwargs) -> object: ...

def ge(*args, **kwargs) -> object: ...

def getitem(*args, **kwargs) -> object: ...

def getslice(a, b: int, c: int) -> object: ...

def gt(*args, **kwargs) -> object: ...

def iadd(*args, **kwargs) -> object: ...

def iand(*args, **kwargs) -> object: ...

def iconcat(*args, **kwargs) -> object: ...

def idiv(*args, **kwargs) -> object: ...

def ifloordiv(*args, **kwargs) -> object: ...

def ilshift(*args, **kwargs) -> object: ...

def imod(*args, **kwargs) -> object: ...

def imul(*args, **kwargs) -> object: ...

def index(*args, **kwargs) -> object: ...

def indexOf(*args, **kwargs) -> int: ...

def inv(*args, **kwargs) -> object: ...

def invert(*args, **kwargs) -> object: ...

def ior(*args, **kwargs) -> object: ...

def ipow(*args, **kwargs) -> object: ...

def irepeat(a, b: int) -> object: ...

def irshift(*args, **kwargs) -> object: ...

def isCallable(*args, **kwargs) -> bool: ...

def isMappingType(*args, **kwargs) -> bool: ...

def isNumberType(*args, **kwargs) -> bool: ...

def isSequenceType(*args, **kwargs) -> bool: ...

def is_(*args, **kwargs) -> bool: ...

def is_not(*args, **kwargs) -> bool: ...

def isub(*args, **kwargs) -> object: ...

def itruediv(*args, **kwargs) -> object: ...

def ixor(*args, **kwargs) -> object: ...

def le(*args, **kwargs) -> object: ...

def lshift(*args, **kwargs) -> object: ...

def lt(*args, **kwargs) -> object: ...

def mod(*args, **kwargs) -> object: ...

def mul(*args, **kwargs) -> object: ...

def ne(*args, **kwargs) -> object: ...

def neg(*args, **kwargs) -> object: ...

def not_(*args, **kwargs) -> bool: ...

def or_(*args, **kwargs) -> object: ...

def pos(*args, **kwargs) -> object: ...

def pow(*args, **kwargs) -> object: ...

def repeat(a, b: int) -> object: ...

def rshift(*args, **kwargs) -> object: ...

def sequenceIncludes(*args, **kwargs) -> bool: ...

def setitem(*args, **kwargs) -> None: ...

def setslice(a, b: int, c: int, d) -> None: ...

def sub(*args, **kwargs) -> object: ...

def truediv(*args, **kwargs) -> object: ...

def truth(*args, **kwargs) -> bool: ...

def xor(*args, **kwargs) -> object: ...


class attrgetter(object):
    pass

class itemgetter(object):
    pass

class methodcaller(object):
    pass
