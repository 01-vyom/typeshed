"""Stub file for the 'math' module."""
# This is an autogenerated file. It serves as a starting point
# for a more precise manual annotation of this module.
# Feel free to edit the source below, but remove this header when you do.

from typing import Any, List, Tuple, Dict, Generic

def acos(*args, **kwargs) -> Any: ...

def acosh(*args, **kwargs) -> Any: ...

def asin(*args, **kwargs) -> Any: ...

def asinh(*args, **kwargs) -> Any: ...

def atan(*args, **kwargs) -> Any: ...

def atan2(*args, **kwargs) -> float: ...

def atanh(*args, **kwargs) -> Any: ...

def ceil(*args, **kwargs) -> Any: ...

def copysign(*args, **kwargs) -> float: ...

def cos(*args, **kwargs) -> Any: ...

def cosh(*args, **kwargs) -> Any: ...

def degrees(*args, **kwargs) -> float: ...

def erf(*args, **kwargs) -> float: ...

def erfc(*args, **kwargs) -> float: ...

def exp(*args, **kwargs) -> Any: ...

def expm1(*args, **kwargs) -> Any: ...

def fabs(*args, **kwargs) -> Any: ...

def factorial(*args, **kwargs) -> long:
    raise ValueError()

def floor(*args, **kwargs) -> Any: ...

def fmod(*args, **kwargs) -> float: ...

def frexp(*args, **kwargs) -> tuple: ...

def fsum(*args, **kwargs) -> float:
    raise OverflowError()
    raise ValueError()

def gamma(*args, **kwargs) -> float: ...

def hypot(*args, **kwargs) -> float: ...

def isfinite(*args, **kwargs) -> bool: ...

def isinf(*args, **kwargs) -> bool: ...

def isnan(*args, **kwargs) -> bool: ...

def ldexp(a: float, b) -> float:
    raise TypeError()

def lgamma(*args, **kwargs) -> float: ...

def log(*args, **kwargs) -> float: ...

def log10(*args, **kwargs) -> float: ...

def log1p(*args, **kwargs) -> Any: ...

def log2(*args, **kwargs) -> float: ...

def modf(*args, **kwargs) -> tuple: ...

def pow(*args, **kwargs) -> float: ...

def radians(*args, **kwargs) -> float: ...

def sin(*args, **kwargs) -> Any: ...

def sinh(*args, **kwargs) -> Any: ...

def sqrt(*args, **kwargs) -> Any: ...

def tan(*args, **kwargs) -> Any: ...

def tanh(*args, **kwargs) -> Any: ...

def trunc(*args, **kwargs) -> Any:
    raise TypeError()
