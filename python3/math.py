"""Stub file for the 'math' module."""
# This is an autogenerated file. It serves as a starting point
# for a more percise manual annotation of this module.
# Feel free to edit the source below, but remove this header when you do.

from typing import List, Tuple, Dict, Undefined, GenericType

def acos(*args, **kwargs) -> object: pass

def acosh(*args, **kwargs) -> object: pass

def asin(*args, **kwargs) -> object: pass

def asinh(*args, **kwargs) -> object: pass

def atan(*args, **kwargs) -> object: pass

def atan2(*args, **kwargs) -> float: pass

def atanh(*args, **kwargs) -> object: pass

def ceil(*args, **kwargs) -> object: pass

def copysign(*args, **kwargs) -> float: pass

def cos(*args, **kwargs) -> object: pass

def cosh(*args, **kwargs) -> object: pass

def degrees(*args, **kwargs) -> float: pass

def erf(*args, **kwargs) -> float: pass

def erfc(*args, **kwargs) -> float: pass

def exp(*args, **kwargs) -> object: pass

def expm1(*args, **kwargs) -> object: pass

def fabs(*args, **kwargs) -> object: pass

def factorial(*args, **kwargs) -> long:
    raise ValueError()

def floor(*args, **kwargs) -> object: pass

def fmod(*args, **kwargs) -> float: pass

def frexp(*args, **kwargs) -> tuple: pass

def fsum(*args, **kwargs) -> float:
    raise OverflowError()
    raise ValueError()

def gamma(*args, **kwargs) -> float: pass

def hypot(*args, **kwargs) -> float: pass

def isfinite(*args, **kwargs) -> bool: pass

def isinf(*args, **kwargs) -> bool: pass

def isnan(*args, **kwargs) -> bool: pass

def ldexp(a: float, b) -> float:
    raise TypeError()

def lgamma(*args, **kwargs) -> float: pass

def log(*args, **kwargs) -> float: pass

def log10(*args, **kwargs) -> float: pass

def log1p(*args, **kwargs) -> object: pass

def log2(*args, **kwargs) -> float: pass

def modf(*args, **kwargs) -> tuple: pass

def pow(*args, **kwargs) -> float: pass

def radians(*args, **kwargs) -> float: pass

def sin(*args, **kwargs) -> object: pass

def sinh(*args, **kwargs) -> object: pass

def sqrt(*args, **kwargs) -> object: pass

def tan(*args, **kwargs) -> object: pass

def tanh(*args, **kwargs) -> object: pass

def trunc(*args, **kwargs) -> object:
    raise TypeError()
