# Stubs for xml.etree.ElementTree (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Union, Dict, List, Sequence, TypeVar, Optional, KeysView, ItemsView, Generator
import io

VERSION = ... # type: str

class ParseError(SyntaxError): ...

def iselement(element: Element) -> bool: ...

_S = TypeVar('_S', str, bytes)
_Ss = TypeVar('_Ss', str, bytes)
_T = TypeVar('_T')
str_or_bytes = Union[str, bytes]

class Element:
    tag = ... # type: str_or_bytes
    attrib = ... # type: Dict[str_or_bytes, str_or_bytes]
    text = ... # type: Optional[str_or_bytes]
    tail = ... # type: Optional[str_or_bytes]
    def __init__(self, tag: _S, attrib: Dict[_S, _S]=..., **extra: Dict[str, _S]) -> None: ...
    def append(self, subelement: Element) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> Element: ...
    def extend(self, elements: Sequence[Element]) -> None: ...
    def find(self, path: str, namespaces: Dict[str, str]=...) -> Optional[Element]: ...
    def findall(self, path: str, namespaces: Dict[str, str]=...) -> List[Element]: ...
    def findtext(self, path: str, default: _T=..., namespaces: Dict[str, str]=...) -> Union[_T, str]: ...
    def get(self, key: _S, default: _T=...) -> Union[_S, _T]: ...
    def getchildren(self) -> List[Element]: ...
    def getiterator(self, tag: Union[str, _S]=...) -> List[Element]: ...
    def insert(self, index: int, subelement: Element) -> None: ...
    def items(self) -> ItemsView[_S, _S]: ...
    def iter(self, tag: Union[str, _S]=...) -> Generator[Element, None, None]: ...
    def iterfind(self, path: str, namespaces: Dict[str, str]=...) -> List[Element]: ...
    def itertext(self) -> Generator[str, None, None]: ...
    def keys(self) -> KeysView[_S]: ...
    def makeelement(self, tag: _Ss, attrib: Dict[_Ss, _Ss]) -> Element: ...
    def remove(self, subelement: Element) -> None: ...
    def set(self, key: _S, value: _S) -> None: ...
    def __bool__(self) -> bool: ...
    def __delitem__(self, index: int) -> None: ...
    def __getitem__(self, index) -> Element: ...
    def __len__(self) -> int: ...
    def __setitem__(self, index: int, element: Element) -> None: ...

def SubElement(parent, tag, attrib=..., **extra): ...
def Comment(text=...): ...
def ProcessingInstruction(target, text=...): ...

PI = ... # type: Any

class QName:
    text = ... # type: Any
    def __init__(self, text_or_uri, tag=...) -> None: ...
    def __hash__(self): ...
    def __le__(self, other): ...
    def __lt__(self, other): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class ElementTree:
    def __init__(self, element=..., file=...) -> None: ...
    def getroot(self): ...
    def parse(self, source, parser=...): ...
    def iter(self, tag=...): ...
    def getiterator(self, tag=...): ...
    def find(self, path, namespaces=...): ...
    def findtext(self, path, default=..., namespaces=...): ...
    def findall(self, path, namespaces=...): ...
    def iterfind(self, path, namespaces=...): ...
    def write(self, file_or_filename, encoding=..., xml_declaration=..., default_namespace=..., method=..., *, short_empty_elements=...): ...
    def write_c14n(self, file): ...

def register_namespace(prefix, uri): ...
def tostring(element, encoding=..., method=..., *, short_empty_elements=...): ...

class _ListDataStream(io.BufferedIOBase):
    lst = ... # type: Any
    def __init__(self, lst) -> None: ...
    def writable(self): ...
    def seekable(self): ...
    def write(self, b): ...
    def tell(self): ...

def tostringlist(element, encoding=..., method=..., *, short_empty_elements=...): ...
def dump(elem): ...
def parse(source, parser=...): ...
def iterparse(source, events=..., parser=...): ...

class XMLPullParser:
    def __init__(self, events=..., *, _parser=...) -> None: ...
    def feed(self, data): ...
    def close(self): ...
    def read_events(self): ...

class _IterParseIterator:
    root = ... # type: Any
    def __init__(self, source, events, parser, close_source=...) -> None: ...
    def __next__(self): ...
    def __iter__(self): ...

def XML(text, parser=...): ...
def XMLID(text, parser=...): ...

fromstring = ... # type: Any

def fromstringlist(sequence, parser=...): ...

class TreeBuilder:
    def __init__(self, element_factory=...) -> None: ...
    def close(self): ...
    def data(self, data): ...
    def start(self, tag, attrs): ...
    def end(self, tag): ...

class XMLParser:
    target = ... # type: Any
    entity = ... # type: Any
    version = ... # type: Any
    def __init__(self, html=..., target=..., encoding=...) -> None: ...
    def _parse_whole(self, *args, **kwargs): ...
    def _setevents(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def doctype(self, name, pubid, system): ...
    def feed(self, data): ...
