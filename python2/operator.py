"""Stub file for the 'operator' module."""
# This is an autogenerated file. It serves as a starting point
# for a more percise manual annotation of this module.
# Feel free to edit the source below, but remove this header when you do.

from typing import List, Tuple, Dict, Undefined, GenericType

def __abs__(*args, **kwargs) -> object: pass

def __add__(*args, **kwargs) -> object: pass

def __and__(*args, **kwargs) -> object: pass

def __concat__(*args, **kwargs) -> object: pass

def __contains__(*args, **kwargs) -> bool: pass

def __delitem__(*args, **kwargs) -> None: pass

def __delslice__(a, b: int, c: int) -> None: pass

def __div__(*args, **kwargs) -> object: pass

def __eq__(*args, **kwargs) -> object: pass

def __floordiv__(*args, **kwargs) -> object: pass

def __ge__(*args, **kwargs) -> object: pass

def __getitem__(*args, **kwargs) -> object: pass

def __getslice__(a, b: int, c: int) -> object: pass

def __gt__(*args, **kwargs) -> object: pass

def __iadd__(*args, **kwargs) -> object: pass

def __iand__(*args, **kwargs) -> object: pass

def __iconcat__(*args, **kwargs) -> object: pass

def __idiv__(*args, **kwargs) -> object: pass

def __ifloordiv__(*args, **kwargs) -> object: pass

def __ilshift__(*args, **kwargs) -> object: pass

def __imod__(*args, **kwargs) -> object: pass

def __imul__(*args, **kwargs) -> object: pass

def __index__(*args, **kwargs) -> object: pass

def __inv__(*args, **kwargs) -> object: pass

def __invert__(*args, **kwargs) -> object: pass

def __ior__(*args, **kwargs) -> object: pass

def __ipow__(*args, **kwargs) -> object: pass

def __irepeat__(a, b: int) -> object: pass

def __irshift__(*args, **kwargs) -> object: pass

def __isub__(*args, **kwargs) -> object: pass

def __itruediv__(*args, **kwargs) -> object: pass

def __ixor__(*args, **kwargs) -> object: pass

def __le__(*args, **kwargs) -> object: pass

def __lshift__(*args, **kwargs) -> object: pass

def __lt__(*args, **kwargs) -> object: pass

def __mod__(*args, **kwargs) -> object: pass

def __mul__(*args, **kwargs) -> object: pass

def __ne__(*args, **kwargs) -> object: pass

def __neg__(*args, **kwargs) -> object: pass

def __not__(*args, **kwargs) -> bool: pass

def __or__(*args, **kwargs) -> object: pass

def __pos__(*args, **kwargs) -> object: pass

def __pow__(*args, **kwargs) -> object: pass

def __repeat__(a, b: int) -> object: pass

def __rshift__(*args, **kwargs) -> object: pass

def __setitem__(*args, **kwargs) -> None: pass

def __setslice__(a, b: int, c: int, d) -> None: pass

def __sub__(*args, **kwargs) -> object: pass

def __truediv__(*args, **kwargs) -> object: pass

def __xor__(*args, **kwargs) -> object: pass

def abs(*args, **kwargs) -> object: pass

def add(*args, **kwargs) -> object: pass

def and_(*args, **kwargs) -> object: pass

def concat(*args, **kwargs) -> object: pass

def contains(*args, **kwargs) -> bool: pass

def countOf(*args, **kwargs) -> int: pass

def delitem(*args, **kwargs) -> None: pass

def delslice(a, b: int, c: int) -> None: pass

def div(*args, **kwargs) -> object: pass

def eq(*args, **kwargs) -> object: pass

def floordiv(*args, **kwargs) -> object: pass

def ge(*args, **kwargs) -> object: pass

def getitem(*args, **kwargs) -> object: pass

def getslice(a, b: int, c: int) -> object: pass

def gt(*args, **kwargs) -> object: pass

def iadd(*args, **kwargs) -> object: pass

def iand(*args, **kwargs) -> object: pass

def iconcat(*args, **kwargs) -> object: pass

def idiv(*args, **kwargs) -> object: pass

def ifloordiv(*args, **kwargs) -> object: pass

def ilshift(*args, **kwargs) -> object: pass

def imod(*args, **kwargs) -> object: pass

def imul(*args, **kwargs) -> object: pass

def index(*args, **kwargs) -> object: pass

def indexOf(*args, **kwargs) -> int: pass

def inv(*args, **kwargs) -> object: pass

def invert(*args, **kwargs) -> object: pass

def ior(*args, **kwargs) -> object: pass

def ipow(*args, **kwargs) -> object: pass

def irepeat(a, b: int) -> object: pass

def irshift(*args, **kwargs) -> object: pass

def isCallable(*args, **kwargs) -> bool: pass

def isMappingType(*args, **kwargs) -> bool: pass

def isNumberType(*args, **kwargs) -> bool: pass

def isSequenceType(*args, **kwargs) -> bool: pass

def is_(*args, **kwargs) -> bool: pass

def is_not(*args, **kwargs) -> bool: pass

def isub(*args, **kwargs) -> object: pass

def itruediv(*args, **kwargs) -> object: pass

def ixor(*args, **kwargs) -> object: pass

def le(*args, **kwargs) -> object: pass

def lshift(*args, **kwargs) -> object: pass

def lt(*args, **kwargs) -> object: pass

def mod(*args, **kwargs) -> object: pass

def mul(*args, **kwargs) -> object: pass

def ne(*args, **kwargs) -> object: pass

def neg(*args, **kwargs) -> object: pass

def not_(*args, **kwargs) -> bool: pass

def or_(*args, **kwargs) -> object: pass

def pos(*args, **kwargs) -> object: pass

def pow(*args, **kwargs) -> object: pass

def repeat(a, b: int) -> object: pass

def rshift(*args, **kwargs) -> object: pass

def sequenceIncludes(*args, **kwargs) -> bool: pass

def setitem(*args, **kwargs) -> None: pass

def setslice(a, b: int, c: int, d) -> None: pass

def sub(*args, **kwargs) -> object: pass

def truediv(*args, **kwargs) -> object: pass

def truth(*args, **kwargs) -> bool: pass

def xor(*args, **kwargs) -> object: pass


class attrgetter(object):
    pass

class itemgetter(object):
    pass

class methodcaller(object):
    pass
